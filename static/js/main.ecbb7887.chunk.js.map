{"version":3,"sources":["actions/index.js","components/SearchInput.js","components/AppBar.js","components/SearchResult.js","components/About.js","components/MainBody.js","constants/index.js","components/LeftManuDrawer.js","components/DataModalDisplay.js","components/BuildInfoDialog.js","components/DownloadModalDisplay.js","components/Backdrop.js","components/App.js","reportWebVitals.js","reducers/app.js","reducers/root.js","index.js","store.js"],"names":["CLICK_COUNT","CHANGE_SEARCH_TEXT","FETCH_LOCALE_TRANSLATIONS","SET_LOCALE","CLOSE_NOTIFICATION","OPEN_ABOUT_DIALOG","CLOSE_ABOUT_DIALOG","EXPAND_ACCORDION","EXPAND_ALL","TOGGLE_LEFT_DRAWER","DISPLAY_JSON_MODAL","OPEN_BUILD_INFO_DIALOG","SET_FUZZY_SEARCH","DISPLAY_DOWNLOAD_MODAL","CHANGE_DOWNLOAD_RESULT_FILENAME","CHANGE_DOWNLOAD_FILE_FORMAT","DOWNLOAD_RESULTS","FILTER_PROJECT","PUBLISH_NOTIFICATION","SEARCH_PENDING","SEARCH_FULFILLED","changeSearchText","text","type","payload","fuzzySearch","state","action","dispatch","sourceStrings","Object","keys","sources","filter","key","includes","sourceTargets","filteredSourceTargets","translationTargets","expansions","translations","selectedLocale","sourceString","i","targets","concat","mappedTargets","map","target","source","projects","project","length","forEach","searchFulfilled","search","getState","a","app","setTimeout","undefined","expandAccordion","id","expanded","toggleLeftDrawer","open","displayJsonModal","dataType","openBuildInfoDialog","displayDownloadModal","display","publishNotification","content","FreeSolo","useDispatch","searchText","useSelector","TextField","multiline","fullWidth","inputProps","style","paddingLeft","color","value","onChange","event","Alert","React","props","ref","elevation","variant","Search","styled","theme","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","SearchIconWrapper","padding","height","pointerEvents","alignItems","justifyContent","renderLocaleSelector","locales","locale","MenuItem","renderProjectFilterOptions","renderSnackBar","notification","Stack","sx","Snackbar","autoHideDuration","onClose","severity","renderExpandAllButton","isExpandAll","translationTarget","Button","onClick","renderDownloadButton","renderProjectFilter","projectFilter","Set","add","split","FormControl","m","minWidth","InputLabel","Select","labelId","label","Array","from","PrimarySearchAppBar","translationLoading","expandAll","Box","flexGrow","AppBar","Toolbar","IconButton","size","edge","aria-label","mr","Avatar","alt","src","Typography","noWrap","component","xs","sm","Tooltip","title","arrow","fetch","then","data","json","fetchLocaleTranslations","Promise","resolve","reject","FormGroup","FormControlLabel","control","Checkbox","checked","direction","RenderSourceContent","isExpanded","Accordion","AccordionSummary","expandIcon","aria-controls","Grid","container","item","endIcon","context","className","description","AccordionDetails","TableContainer","Paper","Table","tableLayout","TableHead","TableRow","TableCell","TableBody","border","scope","whiteSpace","wordWrap","plurals","engineers","pm","owning_team","cc_list","last_update_time","RenderSourceContentHeader","sourceHeaderRendered","gutterBottom","RenderTranslatedContentHeader","translatedHeaderRendered","renderTranslation","source_string","package","RenderTranslatedContent","SearchResult","Divider","About","aboutDialogOpen","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","MainBody","class","SOURCES_JSON","TRANSLATIONS_JSON","renderTranslationsMenu","hasTranslations","ListItemButton","ListItemIcon","ListItemText","primary","TemporaryDrawer","leftDrawerOpen","Drawer","anchor","role","List","DataModalDisplay","displayModal","maxWidth","mode","readOnly","onSelectionChange","getCursor","row","wrapEnabled","showPrintMargin","JSON","stringify","name","BuildInfoDialog","buildInfoDialogOpen","BUILD","last_build_time","versions","DownloadModalDisplay","displayDownload","filename","downloadResultFileName","format","downloadResultFileFormat","changeDownloadResultFileName","changeDownloadResultFileFormat","exportFromJSON","types","txt","css","html","csv","xls","xml","DialogActions","BackDrop","Backdrop","zIndex","drawer","CircularProgress","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","count","combineReducers","produce","draft","fileName","exportType","startsWith","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","promise","thunk","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecbb7887.chunk.js","sourcesContent":["export const CLICK_COUNT = 'CLICK_COUNT'\nexport const CHANGE_SEARCH_TEXT = 'CHANGE_SEARCH_TEXT'\nexport const LOAD_DATA = 'LOAD_DATA'\nexport const SEARCH = 'SEARCH'\nexport const FETCH_LOCALE_TRANSLATIONS = 'FETCH_LOCALE_TRANSLATIONS'\nexport const SET_LOCALE = 'SET_LOCALE'\nexport const CLOSE_NOTIFICATION = 'CLOSE_NOTIFICATION'\nexport const OPEN_ABOUT_DIALOG = 'OPEN_ABOUT_DIALOG'\nexport const CLOSE_ABOUT_DIALOG = 'CLOSE_ABOUT_DIALOG'\nexport const EXPAND_ACCORDION = 'EXPAND_ACCORDION'\nexport const EXPAND_MORE_MENUS = 'EXPAND_MORE_MENUS'\nexport const EXPAND_ALL = 'EXPAND_ALL'\nexport const TOGGLE_LEFT_DRAWER = 'TOGGLE_LEFT_DRAWER'\nexport const DISPLAY_JSON_MODAL = 'DISPLAY_JSON_MODAL'\nexport const OPEN_BUILD_INFO_DIALOG = 'OPEN_BUILD_INFO_DIALOG'\nexport const SET_FUZZY_SEARCH = 'SET_FUZZY_SEARCH'\nexport const DISPLAY_DOWNLOAD_MODAL = 'DISPLAY_DOWNLOAD_MODAL'\nexport const CHANGE_DOWNLOAD_RESULT_FILENAME = 'CHANGE_DOWNLOAD_RESULT_FILENAME'\nexport const CHANGE_DOWNLOAD_FILE_FORMAT = 'CHANGE_DOWNLOAD_FILE_FORMAT'\nexport const DOWNLOAD_RESULTS = 'DOWNLOAD_RESULTS'\nexport const FILTER_PROJECT = 'FILTER_PROJECT'\nexport const PUBLISH_NOTIFICATION = 'PUBLISH_NOTIFICATION'\nexport const SEARCH_PENDING = 'SEARCH_PENDING';\nexport const SEARCH_FULFILLED = 'SEARCH_FULFILLED';\nexport const clickCount = () => ({\n    type: CLICK_COUNT\n})\n\nexport const changeSearchText = (text) => ({\n    type: CHANGE_SEARCH_TEXT,\n    payload: text\n})\n\nexport const loadData = () => ({\n    type: LOAD_DATA,\n    payload: fetch('/strings.json').then(data => data.json())\n})\n\nconst fuzzySearch = (state, action, dispatch) => {\n    const fuzzySearch = state.fuzzySearch\n    let sourceStrings = [action.payload]\n    if (fuzzySearch) {\n        sourceStrings = Object.keys(state.sources).filter(key => key.includes(action.payload))\n    }\n\n    let sourceTargets = []\n    let filteredSourceTargets = []\n    let translationTargets = []\n    let expansions = {}\n\n    const translations = state.translations[state.selectedLocale]\n\n    for (var i = 0; i < sourceStrings.length; i++) {\n        const sourceString = sourceStrings[i]\n        const targets = state.sources[sourceStrings[i]]\n        if (translations && translations[sourceStrings[i]]) {\n            translationTargets.concat(translations[sourceStrings[i]])\n        }\n\n        if (targets) {\n            const mappedTargets = targets.map(target => ({\n                source: sourceString,\n                ...target,\n                ...state.projects[target.project]\n            }));\n            sourceTargets = sourceTargets.concat(mappedTargets);\n        }\n    }\n    filteredSourceTargets = sourceTargets\n    sourceTargets.forEach(target => expansions[target.project] = false);\n    translationTargets.forEach(target => expansions[target.sourceStrings] = false);\n    if (translationTargets.length && sourceTargets.length === 0) {\n        translationTargets = []\n        filteredSourceTargets = []\n        expansions = {}\n    }\n    dispatch(searchFulfilled(sourceTargets, filteredSourceTargets, translationTargets, expansions))\n}\n\nexport const search = (text) => {\n    return async (dispatch, getState) => {\n        const state = getState().app\n        const action = { payload: text }\n        if (state.fuzzySearch) {\n            setTimeout(() => fuzzySearch(state, action, dispatch), 0);\n        } else {\n            const targets = state.sources[action.payload]\n            const translations = state.translations[state.selectedLocale]\n            let filteredSourceTargets = []\n            let sourceTargets = []\n            let translationTargets = []\n            let expansions = {}\n            if (translations) {\n                translationTargets = [translations[action.payload]]\n            } else {\n                translationTargets = undefined\n                expansions = {}\n            }\n\n            if (targets) {\n                sourceTargets = targets.map(target => ({\n                    ...target,\n                    ...state.projects[target.project],\n                    source: action.payload,\n                }))\n                filteredSourceTargets = sourceTargets\n                targets.forEach(target => expansions[target.project] = false)\n            } else {\n                sourceTargets = []\n                filteredSourceTargets = []\n                expansions = {}\n            }\n            dispatch(searchFulfilled(sourceTargets, filteredSourceTargets, translationTargets, expansions))\n        }\n    }\n}\n\nexport const setLocale = (locale) => ({\n    type: SET_LOCALE,\n    payload: locale\n})\n\nexport const fetchLocaleTranslations = (locale) => ({\n    type: FETCH_LOCALE_TRANSLATIONS,\n    payload: fetch(`translations/${locale}/strings.json`).then(data => data.json())\n})\n\nexport const closeNotification = () => ({\n    type: CLOSE_NOTIFICATION\n})\n\nexport const openAboutDialog = () => ({\n    type: OPEN_ABOUT_DIALOG\n})\n\nexport const closeAboutDialog = () => ({\n    type: CLOSE_ABOUT_DIALOG\n})\n\nexport const expandAccordion = (id, expanded) => ({\n    type: EXPAND_ACCORDION,\n    payload: {\n        id,\n        expanded\n    }\n})\n\nexport const expandAll = (expandAll) => ({\n    type: EXPAND_ALL,\n    payload: expandAll\n})\n\nexport const toggleLeftDrawer = (open) => ({\n    type: TOGGLE_LEFT_DRAWER,\n    payload: open\n})\n\nexport const displayJsonModal = (dataType) => ({\n    type: DISPLAY_JSON_MODAL,\n    payload: dataType\n})\n\nexport const openBuildInfoDialog = (open) => ({\n    type: OPEN_BUILD_INFO_DIALOG,\n    payload: open\n})\n\nexport const setFuzzySearch = (checked) => ({\n    type: SET_FUZZY_SEARCH,\n    payload: checked\n})\n\nexport const displayDownloadModal = (display) => ({\n    type: DISPLAY_DOWNLOAD_MODAL,\n    payload: display\n})\n\nexport const changeDownloadResultFileName = (filename) => ({\n    type: CHANGE_DOWNLOAD_RESULT_FILENAME,\n    payload: filename\n})\n\nexport const changeDownloadResultFileFormat = (format) => ({\n    type: CHANGE_DOWNLOAD_FILE_FORMAT,\n    payload: format\n})\n\nexport const downloadResults = () => ({\n    type: DOWNLOAD_RESULTS,\n})\n\nexport const filterProject = (project) => ({\n    type: FILTER_PROJECT,\n    payload: project\n})\n\nexport const publishNotification = (content) => ({\n    type: PUBLISH_NOTIFICATION,\n    payload: content\n})\n\nexport const searching = () => ({\n    type: SEARCH_PENDING,\n})\n\nexport const searchFulfilled = (sourceTargets, filteredSourceTargets, translationTargets, expansions) => ({\n    type: SEARCH_FULFILLED,\n    payload: {\n        sourceTargets,\n        filteredSourceTargets,\n        translationTargets,\n        expansions\n    }\n})","import React from 'react';\nimport TextField from '@mui/material/TextField';\nimport './SearchInput.css';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { changeSearchText } from '../actions';\n\nexport default function FreeSolo() {\n    const dispatch = useDispatch();\n    const searchText = useSelector(state => state.app.searchText);\n    return (\n        <div id='search-input'>\n            <TextField multiline fullWidth inputProps={{ style: { paddingLeft: '50px', color: 'white' }, value: searchText }} value={searchText} onChange={(event) => dispatch(changeSearchText(event.target.value))} />\n        </div>\n    )\n}","import * as React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport SearchIcon from '@mui/icons-material/Search';\nimport SearchInput from './SearchInput';\nimport Button from '@mui/material/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { closeNotification, displayDownloadModal, filterProject, openBuildInfoDialog, search, toggleLeftDrawer } from '../actions'\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport InputLabel from '@mui/material/InputLabel';\nimport { fetchLocaleTranslations, setLocale, openAboutDialog, expandAll, setFuzzySearch, searching } from '../actions'\nimport Tooltip from '@mui/material/Tooltip';\nimport Stack from '@mui/material/Stack';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport MoreIcon from '@mui/icons-material/MoreVert';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport InfoIcon from '@mui/icons-material/Info';\nimport Avatar from '@mui/material/Avatar';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport './AppBar.css'\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst Search = styled('div')(({ theme }) => ({\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(3),\n        width: 'auto',\n    },\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\n\nconst renderLocaleSelector = (locales) => {\n    return locales.map(locale => (\n        <MenuItem value={locale}>\n            <em>{locale}</em>\n        </MenuItem>\n    ))\n}\n\nconst renderProjectFilterOptions = (projects) => {\n    return projects.map(project => (\n        <MenuItem value={project}>\n            <em>{project}</em>\n        </MenuItem>\n    ))\n}\n\nconst renderSnackBar = (dispatch, notification) => {\n    return (<Stack spacing={2} sx={{ width: '100%' }}>\n        <Snackbar open={notification} autoHideDuration={6000} onClose={() => dispatch(closeNotification())}>\n            <Alert severity=\"success\" sx={{ width: '100%' }}>\n                {notification}\n            </Alert>\n        </Snackbar>\n    </Stack>)\n}\n\nconst renderExpandAllButton = (isExpandAll, sourceTargets, translationTarget, dispatch) => {\n    if (Object.keys(sourceTargets).length > 0 || translationTarget) {\n        return (\n            <Button variant=\"contained\" color=\"success\" onClick={() => dispatch(expandAll(!isExpandAll))} >\n                {isExpandAll ? 'Close All' : 'Expand All'}\n            </Button>)\n    } else {\n        return null;\n    }\n}\n\nconst renderDownloadButton = (dispatch, sourceTargets) => {\n    if (sourceTargets.length > 0) {\n        return (<Button variant=\"contained\" color=\"success\" onClick={() => { dispatch(displayDownloadModal(true)) }} >\n            Download {sourceTargets.length} Results\n        </Button>);\n    } else {\n        return null;\n    }\n}\n\nconst renderProjectFilter = (projectFilter, sourceTargets, dispatch) => {\n    const projects = new Set()\n    sourceTargets.forEach(target => {\n        projects.add(target.project.split('-')[0])\n    })\n    return (\n        <FormControl variant=\"standard\" color=\"primary\" sx={{ m: 1, minWidth: 120 }}>\n            <InputLabel id=\"demo-simple-select-standard-label\">Project</InputLabel>\n            <Select\n                labelId=\"demo-simple-select-standard-label\"\n                id=\"demo-simple-select-standard\"\n                value={projectFilter}\n                onChange={(event) => {\n                    dispatch(filterProject(event.target.value));\n                }}\n                label=\"Project\"\n            >\n                {renderProjectFilterOptions(Array.from(projects))}\n            </Select>\n        </FormControl>\n    )\n}\n\nexport default function PrimarySearchAppBar() {\n    const text = useSelector(state => state.app.searchText)\n    const locales = useSelector(state => state.app.locales)\n    const selectedLocale = useSelector(state => state.app.selectedLocale)\n    const translationLoading = useSelector(state => state.app.translationLoading)\n    const notification = useSelector(state => state.app.notification)\n    const sourceTargets = useSelector(state => state.app.sourceTargets)\n    const filteredSourceTargets = useSelector(state => state.app.filteredSourceTargets)\n    const translationTarget = useSelector(state => state.app.translationTarget)\n    const isExpandAll = useSelector(state => state.app.expandAll)\n    const fuzzySearch = useSelector(state => state.app.fuzzySearch)\n    const projectFilter = useSelector(state => state.app.projectFilter)\n\n    const dispatch = useDispatch()\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton\n                        size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        sx={{ mr: 2 }}\n                        onClick={() => dispatch(toggleLeftDrawer(true))}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Avatar alt=\"icon\" src=\"apple-touch-icon.png\" />\n                    <Typography\n                        variant=\"h5\"\n                        noWrap\n                        component=\"div\"\n                        sx={{ display: { xs: 'none', sm: 'block' } }}\n                    >\n                        String Search Tool\n                    </Typography>\n                    <Tooltip title=\"Select the locale of the string you want to search\" arrow>\n                        <FormControl variant=\"standard\" color=\"primary\" sx={{ m: 1, minWidth: 120 }}>\n                            <InputLabel id=\"demo-simple-select-standard-label\">Locale</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-standard-label\"\n                                id=\"demo-simple-select-standard\"\n                                value={selectedLocale}\n                                onChange={(event) => {\n                                    dispatch(setLocale(event.target.value));\n                                    if (event.target.value !== 'en-US') {\n                                        dispatch(fetchLocaleTranslations(event.target.value));\n                                    }\n                                }}\n                                label=\"Locale\"\n                            >\n                                {renderLocaleSelector(locales)}\n                            </Select>\n                        </FormControl>\n                    </Tooltip>\n                    {renderProjectFilter(projectFilter, sourceTargets, dispatch)}\n                    <Search>\n                        <SearchIconWrapper>\n                            <SearchIcon />\n                        </SearchIconWrapper>\n                        <SearchInput />\n                    </Search>\n                    <Button variant=\"contained\" color=\"success\" onClick={() => {\n                        new Promise((resolve, reject) => {\n                            dispatch(searching());\n                            resolve()\n                        }).then(() => dispatch(search(text)))\n                    }}>\n                        Search\n                    </Button>\n                    <FormGroup>\n                        <FormControlLabel control={<Checkbox color=\"default\" checked={fuzzySearch} onChange={() => dispatch(setFuzzySearch(!fuzzySearch))} />} label=\"Fuzzy\" />\n                    </FormGroup>\n                    {renderExpandAllButton(isExpandAll, filteredSourceTargets, translationTarget, dispatch)}\n                    {renderDownloadButton(dispatch, filteredSourceTargets)}\n                    <Box sx={{ flexGrow: 1 }} />\n                    <Stack direction=\"row\" spacing={1}>\n                        <Tooltip title=\"Click to see build info\" arrow>\n                            <IconButton\n                                size=\"large\"\n                                aria-label=\"display build info\"\n                                edge=\"end\"\n                                color=\"inherit\"\n                                onClick={() => dispatch(openBuildInfoDialog(true))}\n                            >\n                                <InfoIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </Stack>\n                    <IconButton\n                        size=\"large\"\n                        aria-label=\"display more actions\"\n                        edge=\"end\"\n                        color=\"inherit\"\n                        onClick={() => dispatch(openAboutDialog())}\n                    >\n                        <MoreIcon />\n                    </IconButton>\n                </Toolbar>\n                {renderSnackBar(dispatch, notification)}\n            </AppBar>\n        </Box >\n    );\n}","import React from 'react'\nimport Accordion from '@mui/material/Accordion';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport Typography from '@mui/material/Typography';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport ManageSearchIcon from '@mui/icons-material/ManageSearch';\nimport './SearchResult.css'\nimport Grid from '@mui/material/Grid';\nimport { changeSearchText, expandAccordion, publishNotification, search } from '../actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Divider from '@mui/material/Divider';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport { styled } from '@mui/material/styles';\n\nconst RenderTranslatedContent = (dispatch, target, expansions) => {\n    const isExpanded = expansions[target.source_string]\n    const handleChange = (id) => (event, expanded) => {\n        dispatch(expandAccordion(id, !isExpanded))\n    };\n\n    return (<Accordion key={target.source_string} expanded={isExpanded} onChange={handleChange(target.source_string)}>\n        <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1bh-content\"\n            id=\"panel1bh-header\"\n        >\n            <Grid container spacing={2}>\n                <Grid item xs={4}>\n                    <Typography>\n                        <div className=\"long_text_div\">\n                            {target.source_string}\n                        </div>\n                    </Typography>\n                    <Typography>\n                        <Button variant=\"contained\" color=\"success\" endIcon={<ManageSearchIcon />} onClick={() => {\n                            dispatch(changeSearchText(target.source_string))\n                            dispatch(search(target.source_string))\n                        }\n                        }>\n                            Find Source\n                        </Button>\n                    </Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <Typography>\n                        {target.context}\n                    </Typography>\n                </Grid>\n                <Grid item xs={2}>\n                    <Typography>\n                        {target.package}\n                    </Typography>\n                </Grid>\n                <Grid item xs={2}>\n                    <Typography>{target.locale}</Typography>\n                </Grid>\n            </Grid>\n        </AccordionSummary>\n        <AccordionDetails>\n            <TableContainer component={Paper}>\n                <Table aria-label=\"simple table\" style={{ tableLayout: 'fixed', width: '100%' }}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Source String</TableCell>\n                            <TableCell>Context</TableCell>\n                            <TableCell>Package</TableCell>\n                            <TableCell>Locale</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        <TableRow\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                        >\n                            <TableCell component=\"td\" scope=\"row\" style={{\n                                whiteSpace: \"normal\",\n                                wordWrap: \"break-word\",\n                                width: '30%'\n                            }}>\n                                {target.source_string}\n                            </TableCell>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {target.context}\n                            </TableCell>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {target.package}\n                            </TableCell>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {target.locale}\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </AccordionDetails>\n    </Accordion>);\n}\nconst RenderSourceContent = (dispatch, target, expansions) => {\n    const isExpanded = expansions[target.project]\n    const handleChange = (id) => (event, expanded) => {\n        dispatch(expandAccordion(id, !isExpanded))\n    };\n    return (\n        <div>\n            <Accordion key={target.project} expanded={isExpanded} onChange={handleChange(target.project)}>\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1bh-content\"\n                    id=\"panel1bh-header\"\n                >\n                    <Grid container spacing={2}>\n                        <Grid item xs={2}>\n                            <Typography>\n                                {target.project}\n                            </Typography>\n\n\n                            <Typography>\n                                <CopyToClipboard text={target.project}>\n                                    <Button variant=\"contained\" color=\"success\" endIcon={<ContentCopyIcon />} onClick={() => dispatch(publishNotification('Project name copied!'))}>\n                                        Copy\n                                    </Button>\n                                </CopyToClipboard>\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={2}>\n                            <Typography>\n                                {target.context}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <Typography>\n                                <div className=\"long_text_div\">\n                                    {target.description}\n                                </div>\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={4}>\n                            <Typography>\n                                <div className=\"long_text_div\">\n                                    {target.source}\n                                </div>\n                            </Typography>\n                            <Typography>\n                                <CopyToClipboard text={target.source}>\n                                    <Button variant=\"contained\" color=\"success\" endIcon={<ContentCopyIcon />} onClick={() => dispatch(publishNotification('Source text copied!'))}>\n                                        Copy\n                                    </Button>\n                                </CopyToClipboard>\n                            </Typography>\n\n                        </Grid>\n                    </Grid>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <TableContainer component={Paper}>\n                        <Table aria-label=\"simple table\" style={{ tableLayout: 'fixed', width: '100%' }}>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>\n                                        <Typography>\n                                            Project Name\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography>\n                                            Context\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography>\n                                            Plurals\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography>\n                                            Engineers\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography>\n                                            Product Managers\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography>\n                                            Owning team\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography>\n                                            CC List\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography>\n                                            Last Updated Time\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography>\n                                            Description\n                                        </Typography>\n                                    </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                <TableRow\n                                    sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                                >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {target.project}\n                                    </TableCell>\n                                    <TableCell style={{\n                                        whiteSpace: \"normal\",\n                                        wordWrap: \"break-word\",\n                                        width: '30%'\n                                    }}>{target.context}</TableCell>\n                                    <TableCell>{target.plurals}</TableCell>\n                                    <TableCell>{target.engineers}</TableCell>\n                                    <TableCell>{target.pm}</TableCell>\n                                    <TableCell>{target.owning_team}</TableCell>\n                                    <TableCell>{target.cc_list}</TableCell>\n                                    <TableCell>{target.last_update_time}</TableCell>\n                                    <TableCell style={{\n                                        whiteSpace: \"normal\",\n                                        wordWrap: \"break-word\",\n                                        width: '30%'\n                                    }}>{target.description}</TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </AccordionDetails>\n            </Accordion>\n\n        </div>\n    )\n}\n\nconst RenderSourceContentHeader = (sourceHeaderRendered) => {\n    if (!sourceHeaderRendered) {\n        return (<Grid container spacing={2}>\n            <Grid item xs={2}>\n                <div className=\"header\">\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Project Name\n                    </Typography>\n                </div>\n            </Grid>\n            <Grid item xs={2}>\n                <div className=\"header\" >\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Context\n                    </Typography>\n                </div>\n            </Grid >\n            <Grid item xs={4}>\n                <div className=\"header\" >\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Description\n                    </Typography>\n                </div>\n            </Grid >\n            <Grid item xs={4}>\n                <div className=\"header\" >\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Source String\n                    </Typography>\n                </div>\n            </Grid >\n        </Grid >)\n    } else {\n        return null\n    }\n}\n\nconst RenderTranslatedContentHeader = (translatedHeaderRendered) => {\n    if (!translatedHeaderRendered) {\n        return (<Grid container spacing={2}>\n            <Grid item xs={4}>\n                <div className=\"header\">\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Source String\n                    </Typography>\n                </div>\n            </Grid>\n            <Grid item xs={4}>\n                <div className=\"header\" >\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Context\n                    </Typography>\n                </div>\n            </Grid >\n            <Grid item xs={2}>\n                <div className=\"header\" >\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Package\n                    </Typography>\n                </div>\n            </Grid >\n            <Grid item xs={2}>\n                <div className=\"header\" >\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Locale\n                    </Typography>\n                </div>\n            </Grid >\n        </Grid >)\n\n    } else {\n        return null;\n    }\n}\n\nconst renderTranslation = (dispatch, translationTarget, expansions) => {\n    if (translationTarget) {\n        return RenderTranslatedContent(dispatch, translationTarget, expansions)\n    } else {\n        return null;\n    }\n}\n\nexport default function SearchResult() {\n    const expansions = useSelector(state => state.app.expansions)\n    const targets = useSelector(state => state.app.filteredSourceTargets);\n    const translationTargets = useSelector(state => state.app.translationTargets)\n    const dispatch = useDispatch()\n\n    let translatedHeaderRendered = false\n    let sourceHeaderRendered = false\n    return (\n        <div>\n            {translationTargets && translationTargets.map(target => {\n                return (<div>\n                    {RenderTranslatedContentHeader(translatedHeaderRendered)}\n                    {translatedHeaderRendered = true}\n                    {renderTranslation(dispatch, target, expansions)}\n                </div>)\n            })}\n            {\n                targets && targets.map(target => {\n                    return (\n                        <div>\n                            {RenderSourceContentHeader(sourceHeaderRendered)}\n                            {sourceHeaderRendered = true}\n                            <div className=\"search-result\">\n                                <Paper elevation={3}>\n                                    {RenderSourceContent(dispatch, target, expansions)}\n                                </Paper>\n                            </div>\n                            <Divider />\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}","import * as React from 'react';\nimport Dialog from '@mui/material/Dialog';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { closeAboutDialog } from '../actions';\n\nexport default function About() {\n    const open = useSelector(state => state.app.aboutDialogOpen)\n    const dispatch = useDispatch()\n    return (\n        <Dialog\n            open={open}\n            onClose={() => dispatch(closeAboutDialog())}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">\n                About the String Search Tool\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    This APP is created and mainatined by renchen (rsun@). If you have any recommendations on improving it, feel free to reach out to me directly.\n                </DialogContentText>\n            </DialogContent>\n        </Dialog>\n    );\n}","import * as React from 'react';\nimport { useSelector } from \"react-redux\"\nimport Typography from '@mui/material/Typography';\nimport './MainBody.css'\n\nfunction MainBody() {\n    const sourceTargets = useSelector(state => state.app.sourceTargets)\n    const translationTarget = useSelector(state => state.app.translationTarget)\n    if (Object.keys(sourceTargets).length > 0 || translationTarget) {\n        return null\n    } else {\n        return (<div class=\"main-body\">\n            <Typography variant=\"h1\" component=\"div\" gutterBottom>\n                No contents found\n            </Typography>\n        </div>)\n    }\n}\n\nexport default MainBody","export const SOURCES_JSON = 'SOURCES_JSON'\nexport const TRANSLATIONS_JSON = 'TRANSLATIONS_JSON'","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Drawer from '@mui/material/Drawer';\nimport List from '@mui/material/List';\nimport Divider from '@mui/material/Divider';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport InboxIcon from '@mui/icons-material/MoveToInbox';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { displayJsonModal, toggleLeftDrawer } from '../actions';\nimport { SOURCES_JSON, TRANSLATIONS_JSON } from '../constants';\nimport ListItemButton from '@mui/material/ListItemButton';\n\nconst renderTranslationsMenu = (dispatch, hasTranslations) => {\n    if (hasTranslations) {\n        return (\n            <ListItemButton onClick={() => dispatch(displayJsonModal(TRANSLATIONS_JSON))}>\n                <ListItemIcon>\n                    <InboxIcon />\n                </ListItemIcon>\n                <ListItemText primary='All Translations' />\n            </ListItemButton>)\n    } else {\n        return null\n    }\n}\n\nexport default function TemporaryDrawer() {\n    const leftDrawerOpen = useSelector(state => state.app.leftDrawerOpen)\n    const hasTranslations = useSelector(state => Object.keys(state.app.translations).length > 0)\n    const dispatch = useDispatch()\n\n    const menus = () => (\n        <Box\n            sx={{ width: 250 }}\n            role=\"presentation\"\n            onClick={() => dispatch(toggleLeftDrawer(true))}\n        >\n            <List>\n                <ListItemButton onClick={() => dispatch(displayJsonModal(SOURCES_JSON))}>\n                    <ListItemIcon>\n                        <InboxIcon />\n                    </ListItemIcon>\n                    <ListItemText primary='All Sources' />\n                </ListItemButton>\n                <Divider/>\n                {renderTranslationsMenu(dispatch, hasTranslations)}\n            </List>\n        </Box>\n    );\n\n    return (\n        <div>\n            <React.Fragment>\n                <Drawer\n                    anchor='left'\n                    open={leftDrawerOpen}\n                    onClose={() => dispatch(toggleLeftDrawer(false))}\n                >\n                    {menus()}\n                </Drawer>\n            </React.Fragment>\n        </div>\n    );\n}","import * as React from 'react';\nimport Dialog from '@mui/material/Dialog';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { displayJsonModal } from '../actions';\nimport { SOURCES_JSON, TRANSLATIONS_JSON } from '../constants';\nimport { changeSearchText, search } from '../actions'\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport 'brace/ext/searchbox';\nimport './DataModalDisplay.css'\n\nexport default function DataModalDisplay() {\n    const dataType = useSelector(state => state.app.displayModal)\n    const locale = useSelector(state => state.app.selectedLocale)\n    const data = useSelector(state => dataType ? (dataType === SOURCES_JSON ? Object.keys(state.app.sources) : Object.keys(state.app.translations[state.app.selectedLocale])) : null)\n\n    const dispatch = useDispatch()\n    return (\n        <Dialog\n            fullWidth={true}\n            maxWidth={true}\n            open={dataType}\n            onClose={() => dispatch((displayJsonModal(null)))}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">\n                {dataType === SOURCES_JSON ? 'All Source Strings' : null}\n                {dataType === TRANSLATIONS_JSON ? 'All Target Strings for locale ' + locale : null}\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    <AceEditor\n                        mode=\"json\"\n                        theme=\"github\"\n                        readOnly={true}\n                        width='100%'\n                        onSelectionChange={(value, event) => {\n                            if (data && value.getCursor().row > 0) {\n                                dispatch(changeSearchText(data[value.getCursor().row - 1]));\n                                dispatch(search(data[value.getCursor().row - 1]));\n                            }\n                        }}\n                        wrapEnabled={true}\n                        showPrintMargin={false}\n                        value={JSON.stringify(data, null, 2)}\n                        name=\"json-modal\"\n                    />\n                </DialogContentText>\n            </DialogContent>\n        </Dialog>\n    );\n}","import * as React from 'react';\nimport Dialog from '@mui/material/Dialog';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { openBuildInfoDialog } from '../actions';\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport 'brace/ext/searchbox';\nimport BUILD from '../data/build.json'\n\nexport default function BuildInfoDialog() {\n    const open = useSelector(state => state.app.buildInfoDialogOpen)\n    const dispatch = useDispatch()\n    return (\n        <Dialog\n            open={open}\n            onClose={() => dispatch(openBuildInfoDialog(false))}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">\n                The current String Seach Tool is built on {BUILD.last_build_time}\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    <AceEditor\n                        mode=\"json\"\n                        theme=\"github\"\n                        readOnly={true}\n                        width='100%'\n                        wrapEnabled={true}\n                        showPrintMargin={false}\n                        value={JSON.stringify(BUILD.versions, null, 2)}\n                        name=\"json-modal\"\n                    />\n                </DialogContentText>\n            </DialogContent>\n        </Dialog>\n    );\n}","import * as React from 'react';\nimport Dialog from '@mui/material/Dialog';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeDownloadResultFileFormat, displayDownloadModal, changeDownloadResultFileName, downloadResults } from '../actions';\nimport DialogActions from '@mui/material/DialogActions';\nimport TextField from '@mui/material/TextField';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport Select from '@mui/material/Select';\nimport Button from '@mui/material/Button';\nimport exportFromJSON from 'export-from-json';\n\nimport './DataModalDisplay.css'\n\nexport default function DownloadModalDisplay() {\n    const displayDownload = useSelector(state => state.app.displayDownloadModal)\n    const filename = useSelector(state => state.app.downloadResultFileName)\n    const format = useSelector(state => state.app.downloadResultFileFormat)\n\n    const dispatch = useDispatch()\n    return (\n        <Dialog\n            open={displayDownload}\n            onClose={() => dispatch((displayDownloadModal(false)))}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">\n                Download search results\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    Configure the following download options\n                </DialogContentText>\n                <TextField\n                    id=\"name\"\n                    label=\"File Name\"\n                    fullWidth\n                    variant=\"filled\"\n                    value={filename}\n                    onChange={(event) => dispatch(changeDownloadResultFileName(event.target.value))}\n                />\n                <InputLabel id=\"demo-simple-select-label\">File Format</InputLabel>\n                <Select\n                    labelId=\"demo-simple-select-label\"\n                    id=\"demo-simple-select\"\n                    fullWidth\n                    value={format}\n                    label=\"File Format\"\n                    onChange={(event) => dispatch(changeDownloadResultFileFormat(event.target.value))}\n                >\n                    <MenuItem value={exportFromJSON.types.txt}>txt</MenuItem>\n                    <MenuItem value={exportFromJSON.types.css}>css</MenuItem>\n                    <MenuItem value={exportFromJSON.types.html}>html</MenuItem>\n                    <MenuItem value={exportFromJSON.types.json}>json</MenuItem>\n                    <MenuItem value={exportFromJSON.types.csv}>csv</MenuItem>\n                    <MenuItem value={exportFromJSON.types.xls}>xls</MenuItem>\n                    <MenuItem value={exportFromJSON.types.xml}>xml</MenuItem>\n                </Select>\n            </DialogContent>\n            <DialogActions>\n                <Button variant=\"outlined\" onClick={() => dispatch(displayDownloadModal(false))}>Cancel</Button>\n                <Button variant=\"outlined\" onClick={() => dispatch(downloadResults())}>Download</Button>\n            </DialogActions>\n        </Dialog >\n    );\n}","import * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Backdrop from '@mui/material/Backdrop';\nimport CircularProgress from '@mui/material/CircularProgress';\n\nexport default function BackDrop() {\n    const translationLoading = useSelector(state => state.app.translationLoading)\n    return (\n        <Backdrop\n            sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n            open={translationLoading}\n        >\n            <CircularProgress color=\"inherit\" />\n        </Backdrop>\n    );\n}\n","import './App.css';\nimport AppBar from './AppBar';\nimport SearchResult from './SearchResult';\nimport AboutDialog from './About';\nimport MainBody from './MainBody';\nimport LeftMenuDrawer from './LeftManuDrawer'\nimport DataModalDisplay from './DataModalDisplay';\nimport BuildInfoDialog from './BuildInfoDialog';\nimport DownloadModalDisplay from './DownloadModalDisplay';\nimport Backdrop from './Backdrop'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppBar />\n      <Backdrop/>\n      <LeftMenuDrawer />\n      <DataModalDisplay />\n      <DownloadModalDisplay />\n      <BuildInfoDialog />\n      <MainBody />\n      <AboutDialog />\n      <SearchResult />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CLICK_COUNT, CHANGE_SEARCH_TEXT, SEARCH, SET_LOCALE, FETCH_LOCALE_TRANSLATIONS, CLOSE_NOTIFICATION, OPEN_ABOUT_DIALOG, CLOSE_ABOUT_DIALOG, EXPAND_ALL, EXPAND_ACCORDION, TOGGLE_LEFT_DRAWER, DISPLAY_JSON_MODAL, OPEN_BUILD_INFO_DIALOG, SET_FUZZY_SEARCH, DISPLAY_DOWNLOAD_MODAL, CHANGE_DOWNLOAD_RESULT_FILENAME, CHANGE_DOWNLOAD_FILE_FORMAT, DOWNLOAD_RESULTS, FILTER_PROJECT, COPY, PUBLISH_NOTIFICATION, SEARCH_PENDING, SEARCH_FULFILLED } from \"../actions\"\nimport produce from \"immer\"\nimport sources from '../data/sources.json'\nimport projects from '../data/projects.json'\nimport locales from '../data/locales.json'\nimport exportFromJSON from 'export-from-json';\n\n\n/*\nsources\n{\n    \"source_text\": {\n        \"project_name\": string,\n        \"project_id\": number,\n        \"context\": string,\n        \"plurals\": [string]\n    }\n}\n\nprojects\n{\n    \"project_id\": {\n        \"name\": string,\n        \"description\": \"\",\n        \"source_loclaes\": [string]\n    }\n}\n\n*/\nconst initialState = {\n    count: 0,\n    searchText: '',\n    sourceTargets: [],\n    aboutDialogOpen: false,\n    translationTargets: undefined,\n    sources,\n    projects,\n    locales,\n    selectedLocale: 'en-US',\n    translationLoading: false,\n    translations: {},\n    notification: '',\n    expansions: {},\n    expandAll: false,\n    leftDrawerOpen: false,\n    displayModal: null,\n    buildInfoDialogOpen: false,\n    fuzzySearch: true,\n    displayDownloadModal: false,\n    downloadResultFileName: 'results',\n    downloadResultFileFormat: exportFromJSON.types.json,\n    filteredSourceTargets: [],\n    projectFilter: ''\n}\n\nconst fuzzySearch = (state, action, draft) => {\n    const fuzzySearch = state.fuzzySearch\n    let sourceStrings = [action.payload]\n    if (fuzzySearch) {\n        sourceStrings = Object.keys(state.sources).filter(key => key.includes(action.payload))\n    }\n\n    let sourceTargets = []\n    let translationTargets = []\n    const translations = state.translations[state.selectedLocale]\n\n    for (var i = 0; i < sourceStrings.length; i++) {\n        const sourceString = sourceStrings[i]\n        const targets = state.sources[sourceStrings[i]]\n        if (translations && translations[sourceStrings[i]]) {\n            translationTargets.concat(translations[sourceStrings[i]])\n        }\n\n        if (targets) {\n            const mappedTargets = targets.map(target => ({\n                source: sourceString,\n                ...target,\n                ...state.projects[target.project]\n            }));\n            sourceTargets = sourceTargets.concat(mappedTargets);\n        }\n    }\n    draft.sourceTargets = sourceTargets;\n    draft.filteredSourceTargets = sourceTargets;\n    draft.translationTargets = translationTargets;\n    draft.sourceTargets.forEach(target => draft.expansions[target.project] = false);\n    draft.translationTargets.forEach(target => draft.expansions[target.sourceStrings] = false);\n    if (draft.translationTargets.length && draft.sourceTargets.length === 0) {\n        draft.translationTargets = []\n        draft.filteredSourceTargets = []\n        draft.expansions = {}\n    }\n}\n\n// eslint-disable-next-line\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case CLICK_COUNT:\n            return {\n                ...state,\n                count: state.count + 1\n            }\n        case CHANGE_SEARCH_TEXT:\n            return produce(state, draft => {\n                draft.searchText = action.payload\n            })\n        case SET_LOCALE:\n            return produce(state, draft => {\n                draft.selectedLocale = action.payload\n            })\n        case FETCH_LOCALE_TRANSLATIONS + '_PENDING':\n            return produce(state, draft => {\n                draft.translationLoading = true\n            })\n        case FETCH_LOCALE_TRANSLATIONS + '_FULFILLED':\n            return produce(state, draft => {\n                draft.translationLoading = false\n                draft.translations[state.selectedLocale] = action.payload\n                draft.notification = `${Object.keys(draft.translations[state.selectedLocale]).length} translations for ${state.selectedLocale} are loaded successfully. `\n            })\n        case SEARCH_PENDING:\n            return produce(state, draft => {\n                draft.translationLoading = true\n            })\n        case SEARCH_FULFILLED:\n            return produce(state, draft => {\n                draft.translationLoading = false\n                draft.sourceTargets = action.payload.sourceTargets\n                draft.filteredSourceTargets = action.payload.filteredSourceTargets\n                draft.translationTargets = action.payload.translationTargets\n                draft.expansions = action.payload.expansions\n            })\n        case CLOSE_NOTIFICATION:\n            return produce(state, draft => {\n                draft.notification = ''\n            })\n        case OPEN_ABOUT_DIALOG:\n            return produce(state, draft => {\n                draft.aboutDialogOpen = true\n            })\n        case CLOSE_ABOUT_DIALOG:\n            return produce(state, draft => {\n                draft.aboutDialogOpen = false\n            })\n        case EXPAND_ACCORDION:\n            return produce(state, draft => {\n                draft.expansions[action.payload.id] = action.payload.expanded\n            })\n        case EXPAND_ALL:\n            return produce(state, draft => {\n                draft.expandAll = action.payload\n                const targets = state.sourceTargets\n\n                if (targets) {\n                    targets.forEach(target => draft.expansions[target.project] = action.payload)\n                }\n            })\n        case TOGGLE_LEFT_DRAWER:\n            return produce(state, draft => {\n                draft.leftDrawerOpen = action.payload\n            })\n        case DISPLAY_JSON_MODAL:\n            return produce(state, draft => {\n                draft.displayModal = action.payload\n            })\n        case OPEN_BUILD_INFO_DIALOG:\n            return produce(state, draft => {\n                draft.buildInfoDialogOpen = action.payload\n            })\n        case SET_FUZZY_SEARCH:\n            return produce(state, draft => {\n                draft.fuzzySearch = action.payload\n            })\n        case DISPLAY_DOWNLOAD_MODAL:\n            return produce(state, draft => {\n                draft.displayDownloadModal = action.payload\n            })\n        case CHANGE_DOWNLOAD_RESULT_FILENAME:\n            return produce(state, draft => {\n                draft.downloadResultFileName = action.payload\n            })\n        case CHANGE_DOWNLOAD_FILE_FORMAT:\n            return produce(state, draft => {\n                draft.downloadResultFileFormat = action.payload\n            })\n        case DOWNLOAD_RESULTS:\n            exportFromJSON(\n                {\n                    data: state.sourceTargets,\n                    fileName: state.downloadResultFileName + '.' + state.downloadResultFileFormat,\n                    exportType: state.downloadResultFileFormat,\n                })\n            return state\n        case FILTER_PROJECT:\n            return produce(state, draft => {\n                draft.projectFilter = action.payload\n                draft.filteredSourceTargets = state.sourceTargets.filter(target => target.project.startsWith(action.payload))\n            })\n        case PUBLISH_NOTIFICATION:\n            return produce(state, draft => {\n                draft.notification = action.payload\n            })\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux';\nimport app from './app';\nexport default combineReducers({\n app\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\n\nconst store = configureStore()\n// store.dispatch(loadData())\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/root';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport promise from 'redux-promise-middleware';\nexport default function configureStore(initialState = {\n  app: {}\n}) {\n  return createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(promise, thunk)),\n  );\n}"],"sourceRoot":""}