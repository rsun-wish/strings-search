{"version":3,"sources":["actions/index.js","components/SearchInput.js","components/AppBar.js","components/SearchResult.js","components/About.js","components/App.js","reportWebVitals.js","reducers/app.js","reducers/root.js","index.js","store.js"],"names":["CLICK_COUNT","CHANGE_SEARCH_TEXT","SEARCH","FETCH_LOCALE_TRANSLATIONS","SET_LOCALE","CLOSE_NOTIFICATION","OPEN_ABOUT_DIALOG","CLOSE_ABOUT_DIALOG","changeSearchText","text","type","payload","search","expandAccordion","id","expanded","FreeSolo","dispatch","useDispatch","searchText","useSelector","state","app","TextField","multiline","fullWidth","inputProps","style","paddingLeft","value","onChange","event","target","Alert","React","props","ref","elevation","variant","Search","styled","theme","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","SearchIconWrapper","padding","height","pointerEvents","display","alignItems","justifyContent","renderLocaleSelector","locales","map","locale","MenuItem","renderSnackBar","notification","Stack","sx","Snackbar","open","autoHideDuration","onClose","severity","PrimarySearchAppBar","selectedLocale","translationLoading","Box","flexGrow","AppBar","Backdrop","color","zIndex","drawer","CircularProgress","Toolbar","Typography","noWrap","component","xs","sm","Tooltip","title","arrow","FormControl","m","minWidth","InputLabel","Select","labelId","fetch","then","data","json","fetchLocaleTranslations","label","Button","onClick","IconButton","size","edge","RenderTranslatedContent","expansions","isExpanded","source_string","Accordion","AccordionSummary","expandIcon","Grid","container","item","className","endIcon","context","AccordionDetails","TableContainer","Paper","Table","tableLayout","TableHead","TableRow","TableCell","TableBody","border","scope","whiteSpace","wordWrap","RenderSourceContent","project","description","align","plurals","engineers","pm","owning_team","cc_list","RenderSourceContentHeader","sourceHeaderRendered","gutterBottom","renderTranslation","translationTarget","translatedHeaderRendered","SearchResult","targets","sourceTargets","Divider","About","aboutDialogOpen","Dialog","DialogTitle","DialogContent","DialogContentText","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","count","undefined","sources","projects","translations","combineReducers","action","produce","draft","Object","keys","length","console","log","forEach","feature_name","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","promise","thunk","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4aa9de0.chunk.js","sourcesContent":["export const CLICK_COUNT = 'CLICK_COUNT'\nexport const CHANGE_SEARCH_TEXT = 'CHANGE_SEARCH_TEXT'\nexport const LOAD_DATA = 'LOAD_DATA'\nexport const SEARCH = 'SEARCH'\nexport const FETCH_LOCALE_TRANSLATIONS = 'FETCH_LOCALE_TRANSLATIONS'\nexport const SET_LOCALE = 'SET_LOCALE'\nexport const CLOSE_NOTIFICATION = 'CLOSE_NOTIFICATION'\nexport const OPEN_ABOUT_DIALOG = 'OPEN_ABOUT_DIALOG'\nexport const CLOSE_ABOUT_DIALOG = 'CLOSE_ABOUT_DIALOG'\nexport const EXPAND_ACCORDION = 'EXPAND_ACCORDION'\nexport const EXPAND_MORE_MENUS = 'EXPAND_MORE_MENUS'\nexport const clickCount = () => ({\n    type: CLICK_COUNT\n})\n\nexport const changeSearchText = (text) => ({\n    type: CHANGE_SEARCH_TEXT,\n    payload: text\n})\n\nexport const loadData = () => ({\n    type: LOAD_DATA,\n    payload: fetch('/strings.json').then(data => data.json())\n})\n\nexport const search = (text) => ({\n    type: SEARCH,\n    payload: text\n})\n\nexport const setLocale = (locale) => ({\n    type: SET_LOCALE,\n    payload: locale\n})\n\nexport const fetchLocaleTranslations = (locale) => ({\n    type: FETCH_LOCALE_TRANSLATIONS,\n    payload: fetch(`translations/${locale}/strings.json`).then(data => data.json())\n})\n\nexport const closeNotification = () => ({\n    type: CLOSE_NOTIFICATION\n})\n\nexport const openAboutDialog = () => ({\n    type: OPEN_ABOUT_DIALOG\n})\n\nexport const closeAboutDialog = () => ({\n    type: CLOSE_ABOUT_DIALOG\n})\n\nexport const expandAccordion = (id, expanded) => ({\n    type: EXPAND_ACCORDION,\n    payload: {\n        id,\n        expanded\n    }\n})","import React from 'react';\nimport TextField from '@mui/material/TextField';\nimport './SearchInput.css';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { changeSearchText } from '../actions';\n\nexport default function FreeSolo() {\n    const dispatch = useDispatch();\n    const searchText = useSelector(state => state.app.searchText);\n    return (\n        <div id='search-input'>\n            <TextField multiline fullWidth inputProps={{ style: { paddingLeft: '50px' }, value: searchText }} value={searchText} onChange={(event) => dispatch(changeSearchText(event.target.value))} />\n        </div>\n    )\n}","import * as React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport SearchIcon from '@mui/icons-material/Search';\nimport SearchInput from './SearchInput';\nimport Button from '@mui/material/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { closeNotification, search } from '../actions'\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport InputLabel from '@mui/material/InputLabel';\nimport { fetchLocaleTranslations, setLocale, openAboutDialog } from '../actions'\nimport Backdrop from '@mui/material/Backdrop';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Tooltip from '@mui/material/Tooltip';\nimport Stack from '@mui/material/Stack';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport IconButton from '@mui/material/IconButton';\nimport MoreIcon from '@mui/icons-material/MoreVert';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst Search = styled('div')(({ theme }) => ({\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    '&:hover': {\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n        marginLeft: theme.spacing(3),\n        width: 'auto',\n    },\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n}));\n\n\nconst renderLocaleSelector = (locales) => {\n    return locales.map(locale => (\n        <MenuItem value={locale}>\n            <em>{locale}</em>\n        </MenuItem>\n    ))\n}\n\nconst renderSnackBar = (dispatch, notification) => {\n    return (<Stack spacing={2} sx={{ width: '100%' }}>\n        <Snackbar open={notification} autoHideDuration={6000} onClose={() => dispatch(closeNotification())}>\n            <Alert severity=\"success\" sx={{ width: '100%' }}>\n                {notification}\n            </Alert>\n        </Snackbar>\n    </Stack>)\n}\n\nexport default function PrimarySearchAppBar() {\n    const text = useSelector(state => state.app.searchText)\n    const locales = useSelector(state => state.app.locales)\n    const selectedLocale = useSelector(state => state.app.selectedLocale)\n    const translationLoading = useSelector(state => state.app.translationLoading)\n    const notification = useSelector(state => state.app.notification)\n    const dispatch = useDispatch()\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\">\n                <Backdrop\n                    sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}\n                    open={translationLoading}\n                >\n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n                <Toolbar>\n                    <Typography\n                        variant=\"h5\"\n                        noWrap\n                        component=\"div\"\n                        sx={{ display: { xs: 'none', sm: 'block' } }}\n                    >\n                        String search tool\n                    </Typography>\n                    <Tooltip title=\"Select the locale of the string you want to search\" arrow>\n                        <FormControl variant=\"standard\" color=\"primary\" sx={{ m: 1, minWidth: 120 }}>\n                            <InputLabel id=\"demo-simple-select-standard-label\">Locale</InputLabel>\n                            <Select\n                                labelId=\"demo-simple-select-standard-label\"\n                                id=\"demo-simple-select-standard\"\n                                value={selectedLocale}\n                                onChange={(event) => {\n                                    dispatch(setLocale(event.target.value));\n                                    dispatch(fetchLocaleTranslations(event.target.value));\n                                }}\n                                label=\"Locale\"\n                            >\n                                {renderLocaleSelector(locales)}\n                            </Select>\n                        </FormControl>\n                    </Tooltip>\n                    <Search>\n                        <SearchIconWrapper>\n                            <SearchIcon />\n                        </SearchIconWrapper>\n                        <SearchInput />\n                    </Search>\n                    <Button variant=\"contained\" color=\"success\" onClick={() => dispatch(search(text))}>\n                        Search\n                    </Button>\n                    <Box sx={{ flexGrow: 1 }} />\n                    <IconButton\n                        size=\"large\"\n                        aria-label=\"display more actions\"\n                        edge=\"end\"\n                        color=\"inherit\"\n                        onClick={() => dispatch(openAboutDialog())}\n                    >\n                        <MoreIcon />\n                    </IconButton>\n                </Toolbar>\n                {renderSnackBar(dispatch, notification)}\n            </AppBar>\n        </Box>\n    );\n}","import React from 'react'\nimport Accordion from '@mui/material/Accordion';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport Typography from '@mui/material/Typography';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport Button from '@mui/material/Button';\nimport ManageSearchIcon from '@mui/icons-material/ManageSearch';\nimport './SearchResult.css'\nimport Grid from '@mui/material/Grid';\nimport { changeSearchText, expandAccordion, search } from '../actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Divider from '@mui/material/Divider';\n\nconst RenderTranslatedContent = (dispatch, target, expansions) => {\n    const isExpanded = expansions[target.source_string]\n    const handleChange = (id) => (event, expanded) => {\n        dispatch(expandAccordion(id, !isExpanded))\n    };\n\n    return (<Accordion key={target.source_string} expanded={isExpanded} onChange={handleChange(target.source_string)}>\n        <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1bh-content\"\n            id=\"panel1bh-header\"\n        >\n            <Grid container spacing={2}>\n                <Grid item xs={4}>\n                    <Typography>\n                        <div className=\"long_text_div\">\n                            {target.source_string}\n                        </div>\n                    </Typography>\n                    <Typography>\n                        <Button variant=\"contained\" color=\"success\" endIcon={<ManageSearchIcon />} onClick={() => {\n                            dispatch(changeSearchText(target.source_string))\n                            dispatch(search(target.source_string))\n                        }\n                        }>\n                            Find Source\n                        </Button>\n                    </Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <Typography>\n                        {target.context}\n                    </Typography>\n                </Grid>\n                <Grid item xs={4}>\n                    <Typography>{target.locale}</Typography>\n                </Grid>\n            </Grid>\n        </AccordionSummary>\n        <AccordionDetails>\n            <TableContainer component={Paper}>\n                <Table aria-label=\"simple table\" style={{ tableLayout: 'fixed', width: '100%' }}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Source String</TableCell>\n                            <TableCell>Locale</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        <TableRow\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                        >\n                            <TableCell component=\"td\" scope=\"row\" style={{\n                                whiteSpace: \"normal\",\n                                wordWrap: \"break-word\",\n                                width: '30%'\n                            }}>\n                                {target.source_string}\n                            </TableCell>\n                            <TableCell component=\"th\" scope=\"row\">\n                                {target.locale}\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </AccordionDetails>\n    </Accordion>);\n}\nconst RenderSourceContent = (dispatch, target, expansions) => {\n    const isExpanded = expansions[target.project]\n    const handleChange = (id) => (event, expanded) => {\n        dispatch(expandAccordion(id, !isExpanded))\n    };\n    return (\n        <div>\n            <Accordion key={target.project} expanded={isExpanded} onChange={handleChange(target.project)}>\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel1bh-content\"\n                    id=\"panel1bh-header\"\n                >\n                    <Grid container spacing={2}>\n                        <Grid item xs={2}>\n                            <Typography>\n                                {target.project}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={5}>\n                            <Typography>\n                                {target.context}\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={5}>\n                            <Typography>\n                                <div className=\"long_text_div\">\n                                    {target.description}\n                                </div>\n                            </Typography>\n                        </Grid>\n                    </Grid>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <TableContainer component={Paper}>\n                        <Table aria-label=\"simple table\" style={{ tableLayout: 'fixed', width: '100%' }}>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Project Name</TableCell>\n                                    <TableCell align=\"right\">Context</TableCell>\n                                    <TableCell align=\"right\">Plurals</TableCell>\n                                    <TableCell align=\"right\">Engineers</TableCell>\n                                    <TableCell align=\"right\">Product Managers</TableCell>\n                                    <TableCell align=\"right\">Owning team</TableCell>\n                                    <TableCell align=\"right\">CC List</TableCell>\n                                    <TableCell align=\"right\">Last Updated Time</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                <TableRow\n                                    sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                                >\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {target.project}\n                                    </TableCell>\n                                    <TableCell align=\"right\" style={{\n                                        whiteSpace: \"normal\",\n                                        wordWrap: \"break-word\",\n                                        width: '30%'\n                                    }}>{target.context}</TableCell>\n                                    <TableCell align=\"right\">{target.plurals}</TableCell>\n                                    <TableCell align=\"right\">{target.engineers}</TableCell>\n                                    <TableCell align=\"right\">{target.pm}</TableCell>\n                                    <TableCell align=\"right\">{target.owning_team}</TableCell>\n                                    <TableCell align=\"right\">{target.cc_list}</TableCell>\n                                    <TableCell align=\"right\" style={{\n                                        whiteSpace: \"normal\",\n                                        wordWrap: \"break-word\",\n                                        width: '30%'\n                                    }}>{target.description}</TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </AccordionDetails>\n            </Accordion>\n\n        </div>\n    )\n}\n\nconst RenderSourceContentHeader = (sourceHeaderRendered) => {\n    if (!sourceHeaderRendered) {\n        return (<Grid container spacing={2}>\n            <Grid item xs={2}>\n                <div className=\"header\">\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Project Name\n                    </Typography>\n                </div>\n            </Grid>\n            <Grid item xs={5}>\n                <div className=\"header\" >\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Context\n                    </Typography>\n                </div>\n            </Grid >\n            <Grid item xs={5}>\n                <div className=\"header\" >\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Description\n                    </Typography>\n                </div>\n            </Grid >\n        </Grid >)\n    } else {\n        return null\n    }\n}\n\nconst RenderTranslatedContentHeader = (translatedHeaderRendered) => {\n    if (!translatedHeaderRendered) {\n        return (<Grid container spacing={2}>\n            <Grid item xs={4}>\n                <div className=\"header\">\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Source String\n                    </Typography>\n                </div>\n            </Grid>\n            <Grid item xs={4}>\n                <div className=\"header\" >\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Context\n                    </Typography>\n                </div>\n            </Grid >\n            <Grid item xs={4}>\n                <div className=\"header\" >\n                    <Typography variant=\"h6\" gutterBottom component=\"div\">\n                        Locale\n                    </Typography>\n                </div>\n            </Grid >\n        </Grid >)\n\n    } else {\n        return null;\n    }\n}\n\nconst renderTranslation = (dispatch, translationTarget, expansions) => {\n    if (translationTarget) {\n        return (\n            <div>\n                {RenderTranslatedContentHeader(false)}\n                {RenderTranslatedContent(dispatch, translationTarget, expansions)}\n            </div>\n        )\n    } else {\n        return null;\n    }\n}\n\nexport default function SearchResult() {\n    const expansions = useSelector(state => state.app.expansions)\n    const targets = useSelector(state => state.app.sourceTargets);\n    const translationTarget = useSelector(state => state.app.translationTarget)\n    const dispatch = useDispatch()\n\n    let sourceHeaderRendered = false\n    return (\n        <div>\n            {renderTranslation(dispatch, translationTarget, expansions)}\n            {\n                targets && targets.map(target => {\n                    return (\n                        <div>\n                            {RenderSourceContentHeader(sourceHeaderRendered)}\n                            {sourceHeaderRendered = true}\n                            {RenderSourceContent(dispatch, target, expansions)}\n                            <Divider />\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { closeAboutDialog } from '../actions';\n\nexport default function About() {\n    const open = useSelector(state => state.app.aboutDialogOpen)\n    const dispatch = useDispatch()\n    return (\n        <Dialog\n            open={open}\n            onClose={() => dispatch(closeAboutDialog())}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogTitle id=\"alert-dialog-title\">\n                About the String search tool\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText id=\"alert-dialog-description\">\n                    This APP is created and mainatined by renchen (rsun@). If you have any recommendations on improving it, feel free to reach out to me directly.\n                </DialogContentText>\n            </DialogContent>\n        </Dialog>\n    );\n}","import './App.css';\nimport AppBar from './AppBar';\nimport SearchResult from './SearchResult';\nimport AboutDialog from './About';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppBar />\n      <AboutDialog />\n      <SearchResult />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CLICK_COUNT, CHANGE_SEARCH_TEXT, SEARCH, SET_LOCALE, FETCH_LOCALE_TRANSLATIONS, CLOSE_NOTIFICATION, OPEN_ABOUT_DIALOG, CLOSE_ABOUT_DIALOG } from \"../actions\"\nimport produce from \"immer\"\nimport sources from '../data/sources.json'\nimport projects from '../data/projects.json'\nimport locales from '../data/locales.json'\n\n/*\nsources\n{\n    \"source_text\": {\n        \"project_name\": string,\n        \"project_id\": number,\n        \"context\": string,\n        \"plurals\": [string]\n    }\n}\n\nprojects\n{\n    \"project_id\": {\n        \"name\": string,\n        \"description\": \"\",\n        \"source_loclaes\": [string]\n    }\n}\n\n*/\nconst initialState = {\n    count: 0,\n    searchText: '',\n    sourceTargets: [],\n    aboutDialogOpen: false,\n    translationTarget: undefined,\n    sources,\n    projects,\n    locales,\n    selectedLocale: 'en-US',\n    translationLoading: false,\n    translations: {},\n    notification: '',\n    expansions: {},\n}\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case CLICK_COUNT:\n            return {\n                ...state,\n                count: state.count + 1\n            }\n        case CHANGE_SEARCH_TEXT:\n            return produce(state, draft => {\n                draft.searchText = action.payload\n            })\n        case SET_LOCALE:\n            return produce(state, draft => {\n                draft.selectedLocale = action.payload\n            })\n        case FETCH_LOCALE_TRANSLATIONS + '_PENDING':\n            return produce(state, draft => {\n                draft.translationLoading = true\n            })\n        case FETCH_LOCALE_TRANSLATIONS + '_FULFILLED':\n            return produce(state, draft => {\n                draft.translationLoading = false\n                draft.translations[state.selectedLocale] = action.payload\n                draft.notification = `${Object.keys(draft.translations[state.selectedLocale]).length} translations for ${state.selectedLocale} are loaded successfully. `\n            })\n        case SEARCH:\n            return produce(state, draft => {\n                const targets = state.sources[action.payload]\n                const translations = state.translations[state.selectedLocale]\n                if (translations) {\n                    draft.translationTarget = translations[action.payload]\n                    console.log(translations[action.payload])\n                } else {\n                    draft.translationTarget = undefined\n                    draft.expansions = {}\n                }\n\n                if (targets) {\n                    draft.sourceTargets = targets.map(target => ({\n                        ...target,\n                        ...state.projects[target.project]\n                    }))\n                    targets.forEach(target => draft.expansions[target.feature_name] = false)\n                } else {\n                    draft.sourceTargets = []\n                    draft.expansions = {}\n                }\n            })\n        case CLOSE_NOTIFICATION:\n            return produce(state, draft => {\n                draft.notification = ''\n            })\n        case OPEN_ABOUT_DIALOG:\n            return produce(state, draft => {\n                draft.aboutDialogOpen = true\n            })\n        case CLOSE_ABOUT_DIALOG:\n            return produce(state, draft => {\n                draft.aboutDialogOpen = false\n            })\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux';\nimport app from './app';\nexport default combineReducers({\n app\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport { loadData } from './actions'\n\nconst store = configureStore()\n// store.dispatch(loadData())\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/root';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport promise from 'redux-promise-middleware';\nexport default function configureStore(initialState = {\n  app: {}\n}) {\n  return createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(promise, thunk)),\n  );\n}"],"sourceRoot":""}